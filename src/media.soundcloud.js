// Generated by CoffeeScript 1.6.3
(function() {
  var addScriptTag, debug;

  debug = window.console.debug;

  /*
  Documentation can be generated using {https://github.com/coffeedoc/codo Codo}
  */


  /*
  Add a script to head with the given @scriptUrl
  */


  addScriptTag = function(scriptUrl) {
    var firstScriptTag, tag;
    debug("adding script " + scriptUrl);
    tag = document.createElement('script');
    tag.src = scriptUrl;
    firstScriptTag = document.getElementsByTagName('script')[0];
    return firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
  };

  /*
  Soundcloud Media Controller - Wrapper for Soundcloud Media API
  API SC.Widget documentation: http://developers.soundcloud.com/docs/api/html5-widget
  API Track documentation: http://developers.soundcloud.com/docs/api/reference#tracks
  @param [videojs.Player] player
  @param [Object] options soundcloudClientId is mandatory!
  @param [Function] ready
  */


  videojs.Soundcloud = videojs.MediaTechController.extend({
    init: function(player, options, ready) {
      var key, _i, _len, _ref;
      debug("initializing Soundcloud tech");
      if (window.soundcloudTech) {
        debug("Soundcloud already exists... kill it!");
        window.soundcloudTech.dispose();
      }
      window.soundcloudTech = this;
      this.features.fullscreenResize = true;
      this.features.volumeControl = true;
      videojs.MediaTechController.call(this, player, options, ready);
      this.player_ = player;
      this.player_el_ = this.player_.el();
      if (typeof options.source !== 'undefined') {
        _ref = options.source;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          this.player_.options()[key] = options.source[key];
        }
      }
      this.clientId = this.player_.options().soundcloudClientId;
      this.soundcloudSource = this.player_.options().src || "";
      this.scWidgetId = this.player_.id() + '_soundcloud_api';
      this.scWidgetElement = videojs.Component.prototype.createEl('iframe', {
        id: this.scWidgetId,
        className: 'vjs-tech',
        scrolling: 'no',
        marginWidth: 0,
        marginHeight: 0,
        frameBorder: 0,
        webkitAllowFullScreen: "true",
        mozallowfullscreen: "true",
        allowFullScreen: "true",
        style: "visibility: hidden;",
        src: "https://w.soundcloud.com/player/?url=" + this.soundcloudSource
      });
      this.player_el_.appendChild(this.scWidgetElement);
      this.player_el_.classList.add("backgroundContainer");
      debug("added widget div");
      if (this.player_.options().autoplay) {
        this.playOnReady = true;
      }
      debug("loading soundcloud");
      return this.loadSoundcloud();
    }
  });

  /*
  Set up everything to use soundcloud's streaming API
  */


  videojs.Soundcloud.prototype.onApiReady = function() {
    debug("onApiReady (SC exists)");
    if (!this.apiInitialized) {
      SC.initialize({
        client_id: this.clientId
      });
      this.apiInitialized = true;
    }
    return this.initWidget();
  };

  /*
  Destruct the tech and it's DOM elements
  */


  videojs.Soundcloud.prototype.dispose = function() {
    debug("dispose");
    if (this.scWidgetElement) {
      this.scWidgetElement.remove();
      debug("Removed widget Element");
      debug(this.scWidgetElement);
    }
    this.player_.el().classList.remove("backgroundContainer");
    this.player_.el().style.backgroundImage = "";
    debug("removed CSS");
    return delete this.soundcloudPlayer(this.soundcloudPlayer ? this.isReady_ = false : void 0);
  };

  videojs.Soundcloud.prototype.load = function(src) {
    debug("loading");
    return this.loadSoundcloud();
  };

  videojs.Soundcloud.prototype.src = function(src) {
    var _this = this;
    debug("load a new source(" + src + ")");
    return this.soundcloudPlayer.load(src, {
      callback: function() {
        return _this.onReady();
      }
    });
  };

  videojs.Soundcloud.prototype.updatePoster = function() {
    var _this = this;
    return this.soundcloudPlayer.getSounds(function(sounds) {
      var posterUrl, sound;
      if (sounds.length > 1) {
        return;
      }
      sound = sounds[0];
      if (!sound.artwork_url) {
        return;
      }
      debug("Setting poster to " + sound.artwork_url);
      posterUrl = sound.artwork_url;
      return _this.player_.el().style.backgroundImage = "url('" + posterUrl + "')";
    });
  };

  videojs.Soundcloud.prototype.play = function() {
    if (this.isReady_) {
      debug("play");
      return this.soundcloudPlayer.play();
    } else {
      debug("to play on ready");
      return this.playOnReady = true;
    }
  };

  /*
  Toggle the playstate between playing and paused
  */


  videojs.Soundcloud.prototype.toggle = function() {
    debug("toggle");
    if (this.player_.paused()) {
      return this.player_.play();
    } else {
      return this.player_.pause();
    }
  };

  videojs.Soundcloud.prototype.pause = function() {
    debug("pause");
    return this.soundcloudPlayer.pause();
  };

  videojs.Soundcloud.prototype.paused = function() {
    debug("paused: " + this.paused_);
    return this.paused_;
  };

  /*
  @return track time in seconds
  */


  videojs.Soundcloud.prototype.currentTime = function() {
    debug("currentTime " + (this.durationMilliseconds * this.playPercentageDecimal / 1000));
    return this.durationMilliseconds * this.playPercentageDecimal / 1000;
  };

  videojs.Soundcloud.prototype.setCurrentTime = function(seconds) {
    debug("setCurrentTime");
    this.soundcloudPlayer.seekTo(seconds * 1000);
    return this.player_.trigger('timeupdate');
  };

  /*
  @return total length of track in seconds
  */


  videojs.Soundcloud.prototype.duration = function() {
    return this.durationMilliseconds / 1000;
  };

  videojs.Soundcloud.prototype.buffered = function() {
    var timePassed;
    timePassed = this.duration() * this.loadPercentageDecimal;
    debug("buffered " + timePassed);
    return videojs.createTimeRange(0, timePassed);
  };

  videojs.Soundcloud.prototype.volume = function() {
    debug("volume: " + this.volumeVal);
    return this.volumeVal;
  };

  videojs.Soundcloud.prototype.setVolume = function(percentAsDecimal) {
    debug("setVolume(" + percentAsDecimal + ") from " + this.volumeVal);
    if (percentAsDecimal !== this.volumeVal) {
      this.volumeVal = percentAsDecimal;
      this.soundcloudPlayer.setVolume(this.volumeVal * 100);
      debug("volume has been set");
      return this.player_.trigger('volumechange');
    }
  };

  videojs.Soundcloud.prototype.muted = function() {
    debug("muted: " + (this.volumeVal === 0));
    return this.volumeVal === 0;
  };

  /*
  Soundcloud doesn't do muting so we need to handle that.
  
  A possible pitfall is when this is called with true and the volume has been changed elsewhere.
  We will use @unmutedVolumeVal
  
  @param {Boolean}
  */


  videojs.Soundcloud.prototype.setMuted = function(muted) {
    debug("setMuted(" + muted + ")");
    if (muted) {
      this.unmuteVolume = this.volumeVal;
      return this.setVolume(0);
    } else {
      return this.setVolume(this.unmuteVolume);
    }
  };

  /*
  Take a wild guess ;)
  */


  videojs.Soundcloud.isSupported = function() {
    debug("isSupported: " + true);
    return true;
  };

  /*
  Fullscreen of audio is just enlarging making the container fullscreen and using it's poster as a placeholder.
  */


  videojs.Soundcloud.prototype.supportsFullScreen = function() {
    debug("we support fullscreen!");
    return true;
  };

  /*
  Fullscreen of audio is just enlarging making the container fullscreen and using it's poster as a placeholder.
  */


  videojs.Soundcloud.prototype.enterFullScreen = function() {
    debug("enterfullscreen");
    return this.scWidgetElement.webkitEnterFullScreen();
  };

  /*
  We return the player's container to it's normal (non-fullscreen) state.
  */


  videojs.Soundcloud.prototype.exitFullScreen = function() {
    debug("EXITfullscreen");
    return this.scWidgetElement.webkitExitFullScreen();
  };

  /*
  Simple URI host check of the given url to see if it's really a soundcloud url
  @param url {String}
  */


  videojs.Soundcloud.prototype.isSoundcloudUrl = function(url) {
    var uri;
    uri = new URI(url);
    switch (uri.host) {
      case "www.soundcloud.com":
      case "soundcloud.com":
        debug("Can play '" + url + "'");
        return true;
      default:
        return false;
    }
  };

  /*
  We expect "audio/soundcloud" or a src containing soundcloud
  */


  videojs.Soundcloud.prototype.canPlaySource = videojs.Soundcloud.canPlaySource = function(source) {
    var ret;
    if (typeof source === "string") {
      return videojs.Soundcloud.prototype.isSoundcloudUrl(source);
    } else {
      debug("Can play source?");
      debug(source);
      ret = (source.type === 'audio/soundcloud') || videojs.Soundcloud.prototype.isSoundcloudUrl(source.src);
      debug(ret);
      return ret;
    }
  };

  /*
  Take care of loading the Soundcloud API
  */


  videojs.Soundcloud.prototype.loadSoundcloud = function() {
    var checkSoundcloudApiReady,
      _this = this;
    debug("loadSoundcloud");
    if (videojs.Soundcloud.apiReady && !this.soundcloudPlayer) {
      return this.initWidget();
    } else {
      if (!videojs.Soundcloud.apiLoading) {
        /*
        			Initiate the soundcloud tech once the API is ready
        */

        checkSoundcloudApiReady = function() {
          if (typeof window.SC !== "undefined") {
            videojs.Soundcloud.apiReady = true;
            clearInterval(videojs.Soundcloud.intervalId);
            _this.onApiReady();
            return debug("cleared interval");
          }
        };
        addScriptTag("https://w.soundcloud.com/player/api.js");
        addScriptTag("https://connect.soundcloud.com/sdk.js");
        videojs.Soundcloud.apiLoading = true;
        return videojs.Soundcloud.intervalId = setInterval(checkSoundcloudApiReady, 500);
      }
    }
  };

  /*
  It should initialize a soundcloud Widget, which will be our player
  and which will react to events.
  */


  videojs.Soundcloud.prototype.initWidget = function() {
    var _this = this;
    debug("Initializing the widget");
    this.soundcloudPlayer = SC.Widget(this.scWidgetElement);
    debug("created widget");
    this.soundcloudPlayer.bind(SC.Widget.Events.READY, function() {
      return _this.onReady();
    });
    debug("attempted to bind READY");
    this.soundcloudPlayer.bind(SC.Widget.Events.PLAY_PROGRESS, function(eventData) {
      return _this.onPlayProgress(eventData.relativePosition);
    });
    this.soundcloudPlayer.bind(SC.Widget.Events.LOAD_PROGRESS, function(eventData) {
      debug("loading");
      return _this.onLoadProgress(eventData.loadedProgress);
    });
    this.soundcloudPlayer.bind(SC.Widget.Events.ERROR, function(error) {
      return _this.onError(error);
    });
    this.soundcloudPlayer.bind(SC.Widget.Events.PLAY, function() {
      return _this.onPlay();
    });
    this.soundcloudPlayer.bind(SC.Widget.Events.PAUSE, function() {
      return _this.onPause();
    });
    return this.soundcloudPlayer.bind(SC.Widget.Events.FINISH, function() {
      return _this.onFinished();
    });
  };

  /*
  Callback for soundcloud's READY event.
  */


  videojs.Soundcloud.prototype.onReady = function() {
    var _this = this;
    debug("onReady");
    this.volumeVal = 0;
    this.durationMilliseconds = 1;
    this.loadPercentageDecimal = 0;
    this.playPercentageDecimal = 0;
    this.paused_ = true;
    this.soundcloudPlayer.getVolume(function(volume) {
      _this.unmuteVolume = volume / 100;
      return _this.setVolume(_this.unmuteVolume);
    });
    this.soundcloudPlayer.getDuration(function(duration) {
      _this.durationMilliseconds = duration;
      _this.player_.trigger('durationchange');
      return _this.player_.trigger("canplay");
    });
    this.updatePoster();
    this.triggerReady();
    this.isReady_ = true;
    if (this.playOnReady) {
      return this.soundcloudPlayer.play();
    }
  };

  /*
  Callback for Soundcloud's PLAY_PROGRESS event
  It should keep track of how much has been played.
  @param {Decimal= playPercentageDecimal} [0...1] How much has been played  of the sound in decimal from [0...1]
  */


  videojs.Soundcloud.prototype.onPlayProgress = function(playPercentageDecimal) {
    this.playPercentageDecimal = playPercentageDecimal;
    debug("onPlayProgress");
    return this.player_.trigger("playing");
  };

  /*
  Callback for Soundcloud's LOAD_PROGRESS event.
  It should keep track of how much has been buffered/loaded.
  @param {Decimal= loadPercentageDecimal} How much has been buffered/loaded of the sound in decimal from [0...1]
  */


  videojs.Soundcloud.prototype.onLoadProgress = function(loadPercentageDecimal) {
    this.loadPercentageDecimal = loadPercentageDecimal;
    debug("onLoadProgress: " + this.loadPercentageDecimal);
    return this.player_.trigger("timeupdate");
  };

  /*
  Callback for Soundcloud's PLAY event.
  It should keep track of the player's paused and playing status.
  */


  videojs.Soundcloud.prototype.onPlay = function() {
    debug("onPlay");
    this.paused_ = false;
    this.playing = !this.paused_;
    return this.player_.trigger("play");
  };

  /*
  Callback for Soundcloud's PAUSE event.
  It should keep track of the player's paused and playing status.
  */


  videojs.Soundcloud.prototype.onPause = function() {
    debug("onPause");
    this.paused_ = true;
    this.playing = !this.paused_;
    return this.player_.trigger("pause");
  };

  /*
  Callback for Soundcloud's FINISHED event.
  It should keep track of the player's paused and playing status.
  */


  videojs.Soundcloud.prototype.onFinished = function() {
    this.paused_ = false;
    this.playing = !this.paused_;
    return this.player_.trigger("ended");
  };

  /*
  Callback for Soundcloud's ERROR event.
  Sadly soundlcoud doesn't send any information on what happened when using the widget API --> no error message.
  */


  videojs.Soundcloud.prototype.onError = function() {
    this.player_.error = "Soundcloud error";
    return this.player_.trigger('error');
  };

}).call(this);
